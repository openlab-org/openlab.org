import functools
import os.path

from subprocess import check_call

from django.conf import settings

HANDLERS = {}
CONVERTERS = {} # xyz -> xyw
RENDERERS = {}  # xyz -> png

def preview_handler(ext):
    def actual_dec(func):
        HANDLERS[ext] = func
        return func
    return actual_dec


def preview_converter(in_exts, out_ext, keep=False, low_priority=False):
    def actual_dec(func):
        for ext in in_exts:
            if low_priority and CONVERTERS.get(ext):
                continue
            CONVERTERS[ext] = (out_ext, func, keep)
        return func
    return actual_dec


def preview_renderer(in_exts, out_exts):
    def actual_dec(func):
        for ext in in_exts:
            CONVERTERS[ext] = (out_ext, func)
        return func
    return actual_dec


def convert(*args):
    return check_call(["convert"] + list(args))


@preview_handler('png')
@preview_handler('gif')
@preview_handler('jpg')
def image_preview(ext, in_path,
                        preview_path_prefix,
                        thumb_path_prefix,
                        file_path_prefix,
                        preview_override={},
                        thumb_override={},
                        format_override='.jpg'):

    """
    Generates a large JPG preview and a small JPG thumbnail of the given image
    from in_path
    """

    # For now, lets just do an awful hack using CLI instead of hooking into
    # libraries directly

    out_preview_path = preview_path_prefix + format_override
    out_thumb_path = thumb_path_prefix + format_override

    ################################
    # Thumbnail generation
    def t_get(prop, default):
        #P = getattr(settings, 'PREQUEUE_THUMB', {})
        P = {}
        return thumb_override.get(prop, P.get(prop, default))

    thumb_width = t_get('width', 150)
    thumb_height = t_get('height', 150)
    thumb_quality = t_get('quality', 98)
    thumb_brightness = t_get('brightness', 0)
    thumb_contrast = t_get('contrast', 0)
    thumb_seam_carving = t_get('seam_carving', False)
    thumb_trim = t_get('trim', False)

    thumb_wxh = "%ix%i" % (thumb_width, thumb_height)

    args = [in_path]

    if thumb_trim:
        args += ['-trim']

    if thumb_seam_carving:
        args += ["-liquid-rescale", "80%x80%", "-thumbnail", "%s^" % thumb_wxh, "-gravity", "center", "-extent", thumb_wxh]
    else:
        args += ["-thumbnail", "%s^" % thumb_wxh, "-gravity", "center", "-extent", thumb_wxh]

    if thumb_brightness or thumb_contrast:
        bxc = "%ix%i" % (thumb_brightness or 0, thumb_contrast or 0)
        args += ['-brightness-contrast', bxc]

    args.append(out_thumb_path)

    convert(*args)
    ################################

    ################################
    # Preview generation
    def p_get(prop, default):
        #P = getattr(settings, 'PREQUEUE_PREVIEW', {})
        P = {}
        return preview_override.get(prop, P.get(prop, default))

    preview_max_width = p_get('max_width', 1170)
    preview_max_height = p_get('max_height', 1170)
    preview_crop = p_get('crop', None)
    preview_quality = p_get('quality', 98)
    preview_brightness = p_get('brightness', 0)
    preview_contrast = p_get('contrast', 0)
    preview_seam_carving = p_get('seam_carving', False)
    preview_trim = p_get('trim', True)
    preview_blur = p_get('blur', None)

    preview_max_wxh = ">%ix%i" % (preview_max_width, preview_max_height)
    args = [in_path, "-liquid-rescale" if preview_seam_carving else "-resize", preview_max_wxh]

    if preview_brightness or preview_contrast:
        bxc = "%ix%i" % (preview_brightness or 0, preview_contrast or 0)
        args += ['-brightness-contrast', bxc]

    if preview_trim:
        args += ['-trim']

    if preview_crop:
        args += ['-crop', preview_crop]

    if preview_blur:
        args += ['-blur', preview_blur]


    args.append(out_preview_path)

    convert(*args)
    ################################

    return {
        "preview": out_preview_path,
        "thumb": out_thumb_path,
    }


def apply_converters(ext, in_path, file_path_prefix):
    """
    Recursively applies any converters registered for the extension and any
    resulting extension.

    Returns the final extension, the final path, and the final "alt path"
    (alternative file type path) if applicable.
    """
    alt_path = None

    while ext in CONVERTERS:
        out_ext, func, use_as_alt = CONVERTERS[ext]
        out_path = ".".join([file_path_prefix, out_ext])
        func(in_path, out_path)

        if use_as_alt:
            alt_path = out_path

        in_path = out_path
        ext = out_ext

    # no conversions
    return ext, in_path, alt_path


def get_handler(ext):
    """
    The simple way you retrieve whatever handlers are registered for a given
    filetype
    """
    return HANDLERS.get(ext.lower())

def test_main(f):
    print "RESULT for ", f
    print image_preview("jpg", f, f+".preview.jpg", f+".thumb.jpg")

if __name__ == '__main__':
    import sys
    f = sys.argv[1]
    test_main(f)



"""
Supported file notes:


-- 3D files --
ivconv supports for 3d files: 3DS ASE BYU DXF GMOD HRC IV OBJ OFF POV SMF
STL/STLA STLB TEC TRI/TRIA TRIB UCD VLA WRL XGL

All of these should be exported to STL or OBJ (maybe offered as another
download option, or tossed..?)

Then use pov-ray to render, OR use https://code.google.com/p/jsc3d/ or
https://github.com/tonylukasavage/jsstl to display in browser. If consistency
between preview / actual is necessary, use PhantomJS to render. Then you click
on the image preview, and it fuzzes (CSS3 blur) out and is like "loading", then
you get the manipulable version.

another ray tracer: http://www.luxrender.net/

-- Document files --

(PDF, etc) Ghostscript, maybe no preview image, but interactive for formats that easy JS
solutions are available.


-- Image files --
Obviously whatever ImageMagick can support, which is almost all of them.
Convert to high-quality JPG thumb / preview-sized. No interactive preview


-- Programming code files --
Thumbnail use a preset. No preview image, just embed syntax highlighted version.



Useful stuff: http://reprap.org/wiki/Useful_Software_Packages#ConvertSTL
"""


