import functools
import os.path
from datetime import date

#import celery

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured

from . import handlers

from . import utils


# NOTE: XXX REQUIRED, :(
# TODO: change to list in setting, thats looped through and imported
from meshviewer import handlers as lololololol
from docviewer import handlers as lolololol


from celeryapp import app

@app.task(ignore_result=True, name="prequeue_create_preview")
def create_preview(model_class, model_id, force=False):
    """
    Main entry point. Queues up a preview generation task for given model.

    Presently rather "hard coded" for this application, later we can abstract
    it if we want to open source prequeue.
    """
    if model_class == 'FileModel':
        from project.models import FileModel
        obj = FileModel.objects.get(id=model_id)
    elif model_class == 'Photo':
        from gallery.models import Photo
        obj = Photo.objects.get(id=model_id)
    else:
        raise NotImplemented("Class %s not available" % model_class)

    # And figure out the function
    if not obj.preview_tried or force:
        populate_preview_model(obj)

        # Save the new version!
        obj.save()



def populate_preview_model_s3(obj):
    """
    Huge hairy function that
        1. Downloads the file from S3
        2. Generates previews
        3. Uploads previews to S3
        4. Updates model with changes made
    """

    s3_storage = "S3BotoStorage"
    if s3_storage not in getattr(settings, 'DEFAULT_FILE_STORAGE', ''):
        raise ImproperlyConfigured("S3Boto storage not specified for s3")

    ######################
    # Directory filename / logic:

    # Okay, lets set up the preview model
    work_directory = utils.get_temp_dir(obj.id)
    ext = obj._prequeue_extension()

    # Now we need to fetch the remote file
    filename = obj._prequeue_path().name
    filename = os.path.split(filename)[-1]

    # Compute a tmp path to download to, and create path as necessary
    in_path = os.path.join(work_directory, filename)
    utils.ensure_directory_exists(in_path)

    # helper funcs
    abspath = lambda s: os.path.join(settings.MEDIA_ROOT, s)
    chop_ext = lambda s: os.path.splitext(s)[0]

    # Construct the paths
    chopped_fn = chop_ext(filename)

    _path = lambda s: os.path.join(work_directory, "%s.%s" % (s, chopped_fn))

    preview_path_prefix = _path("image") 
    thumb_path_prefix   = _path("thumb")
    file_path_prefix    = _path("alt")
    key_dirname         = os.path.dirname(obj.path_builder(filename))


    # Key of object
    s3_key = obj._prequeue_path().name

    ######################
    # DOWNLOAD step

    s3conn = utils.S3Connection() # make new conn

    # Download the actual file
    s3conn.download(s3_key, in_path)

    # . . . . (blocking)

    # Do any meta-data related stuff with local file
    obj._prequeue_after_download(in_path)

    ######################
    # CONVERSION step(s)

    # First, lets do any conversions we have
    ext, in_path, alt_path = handlers.apply_converters(
                            ext, in_path, abspath(file_path_prefix))

    handler = handlers.get_handler(ext)

    # No handlers, nothing happens
    if not (handler or alt_path):
        return None

    result = {}
    if handler:
        # Generate the actual preview & preview thumbs
        result = handler(ext, abspath(in_path),
                    preview_path_prefix=abspath(preview_path_prefix),
                    thumb_path_prefix=abspath(thumb_path_prefix),
                    file_path_prefix=abspath(file_path_prefix))

    def do_upload(path):
        key = os.path.join(key_dirname, os.path.basename(path))
        print("UPLOADING ----------", path, key)
        s3conn.upload(path, key)
        return path, key

    # s3 tmp stuff
    if result.get('preview'):
        # assign path to the new location
        # crazy hack from (https://code.djangoproject.com/ticket/15590)
        #preview_path = os.path.relpath(result.get('preview'), settings.media_root)
        path, key = do_upload(result['preview'])
        obj.preview_image = obj.preview_image.field.attr_class(obj,
                                obj.preview_image.field, key)

    if result.get('thumb'):
        # (ditto)
        #print(thumb_path)
        path = result.get('preview')
        key = os.path.join(key_dirname, os.path.basename(path))
        s3conn.upload(path, key)
        #print(path, key)
        obj.preview_image_thumb = obj.preview_image_thumb.field.attr_class(obj,
                                obj.preview_image_thumb.field, key)

    if result.get('html'):
        # Pre-rendered HTML for the full-sized preview
        obj.preview_html = result.get('html')

    #result['file'] = alt_path

    #if result.get('file'):
    if alt_path:
        # Alternative file format for preview / download
        path = alt_path
        key = os.path.join(key_dirname, os.path.basename(path))
        s3conn.upload(path, key)
        print(path, key)
        obj.preview_file = obj.preview_file.field.attr_class(obj,
                                obj.preview_file.field, key)

    obj.preview_tried = True
    obj.preview_tried_date = date.today()



# Use S3 version
populate_preview_model = populate_preview_model_s3






##################################################
# Old version, probably will not be useful
##################################################

def populate_preview_model_local(obj):
    # Now we apply to the object
    ext = obj._prequeue_extension()

    # Now we get the desired paths, and run the populate
    in_path = obj._prequeue_path().path
    filename = obj._prequeue_path().name
    filename = os.path.split(filename)[-1]

    # helper funcs
    abspath = lambda s: os.path.join(settings.MEDIA_ROOT, s)
    chop_ext = lambda s: os.path.splitext(s)[0]

    # Construct the paths
    preview_path_prefix = chop_ext(obj.preview_path_builder("image", filename))
    thumb_path_prefix = chop_ext(obj.preview_path_builder("thumb", filename))
    file_path_prefix = chop_ext(obj.preview_path_builder("alt", filename))

    # First, lets do any conversions we have
    ext, in_path, alt_path = handlers.apply_converters(
                                        ext, in_path, abspath(file_path_prefix))

    handler = handlers.get_handler(ext)

    # No handlers, nothing happens
    if not (handler or alt_path):
        return None

    # Ensure the directories exist to the new paths
    utils.ensure_directory_exists(abspath(preview_path_prefix))
    utils.ensure_directory_exists(abspath(thumb_path_prefix))
    utils.ensure_directory_exists(abspath(file_path_prefix))

    result = {}
    if handler:
        # Generate the actual preview & preview thumbs
        result = handler(ext, abspath(in_path),
                    preview_path_prefix=abspath(preview_path_prefix),
                    thumb_path_prefix=abspath(thumb_path_prefix),
                    file_path_prefix=abspath(file_path_prefix))

    # S3 tmp stuff
    if result.get('preview'):
        # Assign path to the new location
        # Crazy hack from (https://code.djangoproject.com/ticket/15590) only
        # temporary until we move to S3
        preview_path = os.path.relpath(result.get('preview'), settings.MEDIA_ROOT)
        #print(preview_path)
        obj.preview_image = obj.preview_image.field.attr_class(obj,
                                obj.preview_image.field, preview_path)

    if result.get('thumb'):
        # (ditto)
        thumb_path = os.path.relpath(result.get('thumb'), settings.MEDIA_ROOT)
        #print(thumb_path)
        obj.preview_image_thumb = obj.preview_image_thumb.field.attr_class(obj,
                            obj.preview_image_thumb.field, thumb_path)

    if result.get('html'):
        # Pre-rendered HTML for the full-sized preview
        obj.preview_html = result.get('html')

    #result['file'] = alt_path

    #if result.get('file'):
    if alt_path:
        # Alternative file format for preview / download
        file_path = os.path.relpath(alt_path, settings.MEDIA_ROOT)
        #file_path = os.path.relpath(result['file'], settings.MEDIA_ROOT)
        #file_path = alt_path
        obj.preview_file = obj.preview_file.field.attr_class(obj,
                                obj.preview_file.field, file_path)

    obj.preview_tried = True
    obj.preview_tried_date = date.today()

    return result

