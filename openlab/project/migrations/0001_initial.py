# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-05-22 20:38
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import licensefield.fields
import openlab.core.models
import openlab.prequeue.models
import openlab.project.file_models
import s3uploader.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('discussion', '0001_initial'),
        ('wiki', '0001_initial'),
        ('team', '0001_initial'),
        ('gallery', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cities_light', '0006_compensate_for_0003_bytestring_bug'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='FileModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview_image_thumb', models.ImageField(blank=True, help_text='Image thumb', upload_to=openlab.prequeue.models.thumb_builder)),
                ('preview_image', models.ImageField(blank=True, help_text='Full size image preview', upload_to=openlab.prequeue.models.image_builder)),
                ('preview_file', models.FileField(blank=True, help_text='File in alternative format for preview', upload_to=openlab.prequeue.models.preview_builder)),
                ('preview_html', models.TextField(blank=True, help_text='Text for a plug-in based preview of the file')),
                ('preview_tried', models.BooleanField(db_index=True, default=False, help_text='Have we yet tried encoding a preview for this file? (ie or is it still on the queue)')),
                ('preview_tried_date', models.DateField(blank=True, help_text='When did we last try encoding a preview for this file? (Useful for if we start supporting new preview formats.)', null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('filename', models.CharField(help_text='Original filename of file', max_length=255)),
                ('folder', models.CharField(help_text='Folder path of the file', max_length=255)),
                ('is_tip', models.BooleanField(db_index=True, default=False, help_text="Do these files represent the 'correct'/most recent version?")),
                ('file_license', licensefield.fields.LicenseField(blank=True, choices=[('pd', 'Public domain'), ('cc-by', 'Creative Commons Attribution'), ('cc-by-sa', 'Creative Commons Attribution-ShareAlike'), ('gpl3', 'GPL 3.0'), ('lgpl3', 'LGPL 3.0'), ('tapr', 'TAPR Open Hardware'), ('cern', 'CERN Open Hardware')], help_text="License for this file (defaults to project's license)", max_length=24)),
                ('title', models.CharField(blank=True, help_text='Title of this file', max_length=255)),
                ('credits', models.TextField(blank=True, help_text='Author credits for this file', max_length=2048)),
                ('description', models.TextField(blank=True, help_text='A longer description, or notes about this file', max_length=2048)),
                ('path', models.FileField(help_text='Actual file', upload_to=openlab.project.file_models.file_path_builder)),
                ('size', models.PositiveIntegerField(default=0, help_text='Size in bytes of the file')),
                ('is_uploaded', models.BooleanField(default=False, help_text='Has the file successfully finished uploading?')),
                ('removed', models.BooleanField(default=False, help_text='Is this file being deleted in this revision?')),
                ('deleted', models.BooleanField(db_index=True, default=False, help_text='Field for "soft" deletion (seems like perma-delete to user)')),
                ('photo', models.ForeignKey(blank=True, help_text='Relevant photo for this file', null=True, on_delete=django.db.models.deletion.CASCADE, to='gallery.Photo')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, s3uploader.models.GenericUploadableMixin),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(db_index=False, max_length=32)),
                ('hubpath', models.CharField(db_index=True, help_text="Absolute URL for this, ie 'team-name/project-name' or 'team-name'", max_length=96, unique=True)),
                ('olmarkdown_rendered', models.TextField(blank=True, help_text='HTML for rendered OL Markdown')),
                ('olmarkdown_summary', models.TextField(blank=True, help_text='Text-only suffix of rendered, for rendered OL Markdown')),
                ('olmarkdown_rendered_date', models.DateTimeField(blank=True, null=True)),
                ('street_address', models.TextField(blank=True, default='', help_text='Street address for the project.')),
                ('longitude', models.DecimalField(blank=True, decimal_places=5, help_text='Longitude for the project', max_digits=8, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=5, help_text='Latitude for the project', max_digits=8, null=True)),
                ('title', models.CharField(max_length=255, verbose_name='Name')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('summary', models.CharField(help_text='Describe in in 140 characters or less. (No paragraphs.)', max_length=140, verbose_name='Summary')),
                ('visibility', models.CharField(choices=[('pu', 'Public'), ('un', 'Unlisted'), ('og', 'Need to log in'), ('pr', 'Private'), ('lp', 'Locked - Private'), ('lu', 'Locked - Unlisted'), ('lo', 'Locked - Logged in only')], db_index=True, default='pu', max_length=2)),
                ('license', licensefield.fields.LicenseField(choices=[('pd', 'Public domain'), ('cc-by', 'Creative Commons Attribution'), ('cc-by-sa', 'Creative Commons Attribution-ShareAlike'), ('gpl3', 'GPL 3.0'), ('lgpl3', 'LGPL 3.0'), ('tapr', 'TAPR Open Hardware'), ('cern', 'CERN Open Hardware')], default='pd', help_text='License for the entire project', max_length=24)),
                ('biome', models.CharField(choices=[('11', 'Urban'), ('12', 'Mixed settlements'), ('21', 'Rice villages'), ('22', 'Irrigated villages'), ('23', 'Rainfed villages'), ('24', 'Pastoral villages'), ('31', 'Residential irrigated croplands'), ('32', 'Residential rainfed croplands'), ('33', 'Populated croplands'), ('34', 'Remote croplands'), ('41', 'Residential rangelands'), ('42', 'Populated rangelands'), ('43', 'Remote rangelands'), ('51', 'Residential woodlands'), ('52', 'Populated woodlands'), ('53', 'Remote woodlands'), ('54', 'Inhabited treeless and barren lands'), ('61', 'Wild woodlands'), ('62', 'Wild treeless and barren lands')], help_text='Choose the anthrome to which this project is most related to.', max_length=2)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cities_light.City')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cities_light.Country')),
                ('dependencies', models.ManyToManyField(help_text='Sub-projects that this project uses', related_name='used_by_projects', to='project.Project')),
                ('forked_from', models.ForeignKey(blank=True, help_text='Project that this project was forked from', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='forks', to='project.Project')),
                ('gallery', models.ForeignKey(blank=True, help_text='Image gallery for the project', null=True, on_delete=django.db.models.deletion.CASCADE, to='gallery.Gallery')),
                ('photo', models.ForeignKey(blank=True, help_text='Select a photo to be used as an icon. You can only select from photos you have already uploaded to the gallery.', null=True, on_delete=django.db.models.deletion.CASCADE, to='gallery.Photo')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cities_light.Region')),
                ('tags', taggit.managers.TaggableManager(help_text='Tags for the project', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('team', models.ForeignKey(blank=True, help_text='Team that can manage the project', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_projects', to='team.Team')),
            ],
            options={
                'abstract': False,
                'get_latest_by': 'updated_date',
            },
            bases=(openlab.core.models.UpdateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Revision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('number', models.PositiveIntegerField(db_index=True, help_text='Revision number')),
                ('hash_code', models.CharField(db_index=True, help_text='Randomized 16 digit hex number to specify this revision (globally unique alternative to revision number)', max_length=16, unique=True, validators=[django.core.validators.RegexValidator(code='nomatch', message='Length has to be 16 digit lowercase hex', regex='^[a-f0-9]{16}$')])),
                ('summary', models.CharField(blank=True, default='', help_text='Summary of changes in revision', max_length=140, verbose_name='Summary')),
                ('changes', models.TextField(blank=True, default='', help_text='A longer description of changes', max_length=2048)),
                ('is_ready', models.BooleanField(default=False, help_text='Is it all ready for display (e.g. all previews rendered)?')),
                ('is_uploaded', models.BooleanField(default=False, help_text='Did the person click "submit" and is done uploading / arranging?')),
                ('deleted', models.BooleanField(db_index=True, default=False, help_text='Field for "soft" deletion (seems like perma-delete to user)')),
                ('project', models.ForeignKey(help_text='Project this revision is for', on_delete=django.db.models.deletion.CASCADE, related_name='project_revisions', to='project.Project')),
                ('user', models.ForeignKey(help_text='User who authored the revision', on_delete=django.db.models.deletion.CASCADE, related_name='project_revisions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view', models.BooleanField(default=True)),
                ('contribute', models.BooleanField(default=True)),
                ('change', models.BooleanField(default=True)),
                ('revert', models.BooleanField(default=True)),
                ('invite', models.BooleanField(default=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teampermission_permission', to='project.Project')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_teampermission', to='team.Team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view', models.BooleanField(default=True)),
                ('contribute', models.BooleanField(default=True)),
                ('change', models.BooleanField(default=True)),
                ('revert', models.BooleanField(default=True)),
                ('invite', models.BooleanField(default=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userpermission_permission', to='project.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_userpermission', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='project',
            name='team_access',
            field=models.ManyToManyField(related_name='permissions', through='project.TeamPermission', to='team.Team'),
        ),
        migrations.AddField(
            model_name='project',
            name='threads',
            field=models.ManyToManyField(help_text='Threads related to this', to='discussion.Thread'),
        ),
        migrations.AddField(
            model_name='project',
            name='tip_revision',
            field=models.ForeignKey(blank=True, help_text='Latest correct revision', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='latest_stable', to='project.Revision'),
        ),
        migrations.AddField(
            model_name='project',
            name='user',
            field=models.ForeignKey(help_text='Creator of the project', on_delete=django.db.models.deletion.CASCADE, related_name='project', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='user_access',
            field=models.ManyToManyField(related_name='permissions', through='project.UserPermission', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='wikisite',
            field=models.ForeignKey(blank=True, help_text='Project wiki', null=True, on_delete=django.db.models.deletion.CASCADE, to='wiki.WikiSite'),
        ),
        migrations.AddField(
            model_name='filemodel',
            name='project',
            field=models.ForeignKey(help_text='Project associated with this file', on_delete=django.db.models.deletion.CASCADE, related_name='files', to='project.Project'),
        ),
        migrations.AddField(
            model_name='filemodel',
            name='replaces',
            field=models.ForeignKey(blank=True, help_text='The file that this file replaces in the previous revision', null=True, on_delete=django.db.models.deletion.CASCADE, to='project.FileModel'),
        ),
        migrations.AddField(
            model_name='filemodel',
            name='revision',
            field=models.ForeignKey(help_text='Revision this file was uploaded to', on_delete=django.db.models.deletion.CASCADE, related_name='files', to='project.Revision'),
        ),
        migrations.AddField(
            model_name='filemodel',
            name='user',
            field=models.ForeignKey(help_text='Last person to change the file', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='revision',
            unique_together=set([('project', 'number')]),
        ),
    ]
